package com.datalingo.one.service;


import com.datalingo.one.config.OpenAIConfig;
import com.datalingo.one.dto.QueryRequest;
import com.datalingo.one.dto.QueryResponse;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

import org.springframework.stereotype.Service;
import org.springframework.web.reactive.function.client.WebClient;
import org.springframework.http.MediaType;
import reactor.core.publisher.Mono;

import java.util.Map;

@Service
@Slf4j
@RequiredArgsConstructor
public class OpenAIQueryToSqlConverter implements QueryToSqlConverter {

    private final OpenAIConfig config;

    @Override
    public QueryResponse convertToSql(QueryRequest request) {
        String prompt = buildPrompt(request);

        WebClient webClient = config.webClient();

        Map<String, Object> body = Map.of(
            "model", "gpt-4",
            "messages", new Object[] {
                Map.of("role", "system", "content", "You are an AI assistant that converts natural language into SQL."),
                Map.of("role", "user", "content", prompt)
            },
            "temperature", 0.2
        );

        try {
            String response = webClient.post()
                .contentType(MediaType.APPLICATION_JSON)
                .bodyValue(body)
                .retrieve()
                .bodyToMono(Map.class)
                .map(resp -> {
                    var choices = (java.util.List<Map<String, Object>>) resp.get("choices");
                    if (choices != null && !choices.isEmpty()) {
                        Map<String, Object> message = (Map<String, Object>) choices.get(0).get("message");
                        return (String) message.get("content");
                    }
                    return null;
                })
                .block();

            return new QueryResponse(response, "success", "SQL generated successfully");

        } catch (Exception e) {
            log.error("Error calling OpenAI API: ", e);
            return new QueryResponse(null, "error", "Failed to generate SQL: " + e.getMessage());
        }
    }

    private String buildPrompt(QueryRequest request) {
        return String.format(
            "Convert the following natural language request into an SQL query for table `%s` using database type `%s`. " +
            "Natural language: \"%s\". Only return the SQL query. No explanations.",
            request.getTableName(), request.getDataSource(), request.getQuery()
        );
    }
}
