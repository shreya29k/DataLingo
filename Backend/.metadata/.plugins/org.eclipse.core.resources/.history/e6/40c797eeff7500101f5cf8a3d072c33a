package com.datalingo.one.exception;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.context.request.WebRequest;

import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.Map;

@ControllerAdvice
public class GlobalExceptionHandler {
    
    private static final Logger log = LoggerFactory.getLogger(GlobalExceptionHandler.class);
    
    @ExceptionHandler(DatabaseConnectionException.class)
    public ResponseEntity<Map<String, Object>> handleDatabaseConnectionException(
            DatabaseConnectionException ex, WebRequest request) {
        
        log.error("Database connection error: {}", ex.getMessage());
        
        Map<String, Object> errorResponse = createErrorResponse(
            "DATABASE_CONNECTION_ERROR",
            ex.getMessage(),
            HttpStatus.SERVICE_UNAVAILABLE
        );
        
        return new ResponseEntity<>(errorResponse, HttpStatus.SERVICE_UNAVAILABLE);
    }
    
    @ExceptionHandler(QueryExecutionException.class)
    public ResponseEntity<Map<String, Object>> handleQueryExecutionException(
            QueryExecutionException ex, WebRequest request) {
        
        log.error("Query execution error: {}", ex.getMessage());
        
        Map<String, Object> errorResponse = createErrorResponse(
            "QUERY_EXECUTION_ERROR",
            ex.getMessage(),
            HttpStatus.BAD_REQUEST
        );
        
        return new ResponseEntity<>(errorResponse, HttpStatus.BAD_REQUEST);
    }
    
    @ExceptionHandler(ServiceCommunicationException.class)
    public ResponseEntity<Map<String, Object>> handleServiceCommunicationException(
            ServiceCommunicationException ex, WebRequest request) {
        
        log.error("Service communication error: {}", ex.getMessage());
        
        Map<String, Object> errorResponse = createErrorResponse(
            "SERVICE_COMMUNICATION_ERROR",
            ex.getMessage(),
            HttpStatus.SERVICE_UNAVAILABLE
        );
        
        return new ResponseEntity<>(errorResponse, HttpStatus.SERVICE_UNAVAILABLE);
    }
    
    @ExceptionHandler(Exception.class)
    public ResponseEntity<Map<String, Object>> handleGenericException(
            Exception ex, WebRequest request) {
        
        log.error("Unexpected error: {}", ex.getMessage(), ex);
        
        Map<String, Object> errorResponse = createErrorResponse(
            "INTERNAL_SERVER_ERROR",
            "An unexpected error occurred",
            HttpStatus.INTERNAL_SERVER_ERROR
        );
        
        return new ResponseEntity<>(errorResponse, HttpStatus.INTERNAL_SERVER_ERROR);
    }
    
    private Map<String, Object> createErrorResponse(String errorCode, String message, HttpStatus status) {
        Map<String, Object> errorResponse = new HashMap<>();
        errorResponse.put("success", false);
        errorResponse.put("errorCode", errorCode);
        errorResponse.put("errorMessage", message);
        errorResponse.put("timestamp", LocalDateTime.now());
        errorResponse.put("status", status.value());
        return errorResponse;
    }
}