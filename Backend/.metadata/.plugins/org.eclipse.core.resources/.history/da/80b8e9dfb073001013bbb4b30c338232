package com.datalingo.one.controller;

import com.datalingo.one.dto.QueryRequest;
import com.datalingo.one.dto.QueryResponse;
import com.datalingo.one.service.QueryProcessingService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@RestController
@RequestMapping("/api/query")
@CrossOrigin(origins = "*")
public class QueryController {
    
    private static final Logger logger = LoggerFactory.getLogger(QueryController.class);
    
    @Autowired
    private QueryProcessingService queryProcessingService;
    
    @PostMapping("/execute")
    public ResponseEntity<QueryResponse> executeQuery(@RequestBody QueryRequest request) {
        try {
            logger.info("Received query request: {}", request.getNaturalLanguageQuery());
            
            if (request.getNaturalLanguageQuery() == null || request.getNaturalLanguageQuery().trim().isEmpty()) {
                return ResponseEntity.badRequest()
                    .body(new QueryResponse(null, "Natural language query cannot be empty", false));
            }
            
            String sqlQuery = queryProcessingService.processQuery(
                request.getNaturalLanguageQuery(), 
                request.getTableSchema()
            );
            
            QueryResponse response = new QueryResponse(sqlQuery, "Query processed successfully", true);
            return ResponseEntity.ok(response);
            
        } catch (Exception e) {
            logger.error("Error processing query", e);
            QueryResponse errorResponse = new QueryResponse(null, 
                "Error processing query: " + e.getMessage(), false);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(errorResponse);
        }
    }
    
    @GetMapping("/health")
    public ResponseEntity<String> healthCheck() {
        return ResponseEntity.ok("Query Processing Service is running");
    }
}
